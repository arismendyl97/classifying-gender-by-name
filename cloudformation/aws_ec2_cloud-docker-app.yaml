AWSTemplateFormatVersion: '2010-09-09'
Description: Template to deploy a t2.micro EC2 instance running a Dockerized app using docker-compose.

Resources:
  MyEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      KeyName: your-key-name   # Replace with your EC2 key pair name
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          amazon-linux-extras install docker -y
          service docker start
          usermod -a -G docker ec2-user
          curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep tag_name | cut -d '\"' -f 4)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          yum install git -y
          cd /home/ec2-user
          git clone https://github.com/arismendyl97/classifying-gender-by-name.git
          cd your-repo
          docker-compose up -d
      ImageId: ami-0c55b159cbfafe1f0  # Amazon Linux 2 AMI (replace with a region-specific AMI if needed)
      IamInstanceProfile: !Ref EC2InstanceProfile

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH and HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  EC2InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

Outputs:
  InstanceId:
    Description: "InstanceId of the newly created EC2 instance"
    Value: !Ref MyEC2Instance
  PublicIP:
    Description: "Public IP address of the newly created EC2 instance"
    Value: !GetAtt MyEC2Instance.PublicIp
  WebURL:
    Description: "Application endpoint"
    Value: !Sub "http://${MyEC2Instance.PublicDnsName}"